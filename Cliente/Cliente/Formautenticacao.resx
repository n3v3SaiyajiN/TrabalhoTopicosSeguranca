<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>